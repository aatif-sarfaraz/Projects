#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define ld long double
#define mod 1000000007
#define N 1000005

//Defining the recersion function, with the constraints row number,col number, the 9x9 matrix of the sudoku, the values in the 3x3 sub matrix, the values in the rows, the values in the col.
void rec(int r, int c, vector<vector<char>> &a, map<pair<int,int>,map<int,int>> &mp, vector<map<int,int>> row, vector<map<int,int>> col)
{
	if(r == 9)						// if the row == 9 means the rec has traversed
	{								//throughout the matrix.
		for(auto it : a)			//Hence we must have a complete sudoku.
		{
			for(auto i : it)
			{
				cout<<i<<" ";
			}
			cout<<"\n";
		}
		cout<<"\n";
		return;
	}

	if(c == 9)						//if the col == 9 then we must go to the next
	{								//row.
		rec(r+1,0,a,mp,row,col);	
		return;
	}

	if(a[r][c] != '.')				// if the {r,c} has an element we simply move
	{								// forward.
		rec(r,c+1,a,mp,row,col);	
		return;
	}

	for(int i=1;i<=9;i++)			//now we try all the possible numbers from 1-9.
	{
		int rb = r/3, cb = c/3;
		if(!mp[{rb,cb}][i] && !row[r][i] && !col[c][i])
		{
			mp[{rb,cb}][i] = 1;		// putting the number in the sub matrix.
			row[r][i] = 1;			// putting the number in the row.
			col[c][i] = 1;			// putting the number in the col.
			a[r][c] = i + '0';		// putting the number in the string.
			rec(r,c+1,a,mp,row,col);
			mp[{rb,cb}][i] = 0;		// removing the number in the sub matrix.
			row[r][i] = 0;			// removing the number in the row.
			col[c][i] = 0;			// removing the number in the col.
			a[r][c] = '.';			// removing the number in the string.
		}
	}
}

void solvesudoku(vector<vector<char>> &a)
{
	map<pair<int,int>,map<int,int>> mp;		// a map of the sub matix and the number
	vector<map<int,int>> row(9);			// vector of the numbers in the row
	vector<map<int,int>> col(9);			// vector of the numbers in the col

	for(int i=0;i<9;i++)					//putting in the intial given values.	
	{
		for(int j=0;j<9;j++)
		{
			if(a[i][j] != '.')
			{
				mp[{i/3 , j/3}][a[i][j] - '0'] = 1;
				row[i][a[i][j] - '0'] = 1;
				col[j][a[i][j] - '0'] = 1;
			}
		}
	}

	rec(0,0,a,mp,row,col);					// calling recursion from {0,0}.
}

void solve()
{
	vector<vector<char>> sudoku(9);
	cout<<"---------------------------------------------------"<<endl;
	cout<<"---------------------------------------------------"<<endl;
	cout<<"------------PLEASE ENTER A VALID SUDOKU------------"<<endl;
	cout<<"--------------------IN TERMS OF--------------------"<<endl;
	cout<<"----------------NUMBERS 1-9 AND '.'----------------"<<endl;
	cout<<"---------------------------------------------------"<<endl;
	cout<<"---------------------------------------------------"<<endl;
	for(int i=0;i<9;i++)
	{
		string s;
		cin>>s;
		for(int j=0;j<9;j++)
		{
			sudoku[i].push_back(s[j]);
		}
	}


	cout<<"---------------------------------------------------"<<endl;
	cout<<"---------------------------------------------------"<<endl;
	solvesudoku(sudoku);
}

signed main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    solve();
}


// checking input for the sudoku.
// 53..7....
// 6..195...
// .98....6.
// 8...6...3
// 4..8.3..1
// 7...2...6
// .6....28.
// ...419..5
// ....8..79

// expected output for the sudoku.
// 5 3 4 6 7 8 9 1 2 
// 6 7 2 1 9 5 3 4 8 
// 1 9 8 3 4 2 5 6 7 
// 8 5 9 7 6 1 4 2 3 
// 4 2 6 8 5 3 7 9 1 
// 7 1 3 9 2 4 8 5 6 
// 9 6 1 5 3 7 2 8 4 
// 2 8 7 4 1 9 6 3 5 
// 3 4 5 2 8 6 1 7 9 
